version: 2.1 # use CircleCI 2.1

executors:
  node-project:
    working_directory: ~/tmp
    docker:
      - image: circleci/node:12.12.0

jobs: # a collection of steps
  checkout_and_install_deps: # install npm deps
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Install NPM Dependencies
          command: npm i
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/tmp/node_modules
      - save_cache: # special step to save the complete code cache
          key: code-with-deps-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/tmp

  audit:
    executor: node-project
    steps:
      - restore_cache:
          key: code-with-deps-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run:
          name: Audit NPM Dependencies # Run the audit, and also output the JSON as an artifact
          command: npm run audit:ci
      - store_artifacts:
          path: ~/tmp/reports/audit

  test: # test the project - requires dependencies to have been installed
    executor: node-project
    steps:
      - restore_cache:
          key: code-with-deps-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: # run tests
          name: Tests
          command: npm run test:ci
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: coverage
          prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: ~/tmp/reports/jest
      - store_artifacts:
          path: ~/tmp/reports/jest

  lint: # lint the project - requires dependencies to have been installed
    executor: node-project
    steps:
      - restore_cache:
          key: code-with-deps-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: # run linter
          name: Linting
          command: npm run lint:ci
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: ~/tmp/reports/eslint
      - store_artifacts:
          path: ~/tmp/reports/eslint

  build: # build the project - requires dependencies to have been installed
    executor: node-project
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run: # run build
          name: Build
          command: |
            if [ $CIRCLE_BRANCH = 'master' ]; then
            env BUILD_NUM=$CIRCLE_BUILD_NUM npm run build
            elif [ $CIRCLE_BRANCH = 'staging' ]; then
            env BUILD_NUM=$CIRCLE_BUILD_NUM npm run build:staging
            else
            env BUILD_NUM=$CIRCLE_BUILD_NUM npm run build:dev
            fi
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: dist
          prefix: dist
      - save_cache: # special step to save the dist cache
          key: dist-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - ~/tmp/dist
            - ~/tmp/.firebaserc
            - ~/tmp/firebase.json
            - ~/tmp/package-lock.json

  deploy_to_firebase_staging: # deploy the project to staging - SHOULD ONLY BE RUN ON STAGING BRANCH
    executor: node-project
    steps:
      - restore_cache: # restore the /dist folder and associated deploy files
          key: dist-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Deploy to Firebase Hosting
          command: ./node_modules/.bin/firebase deploy --token "$FIREBASE_TOKEN" --only hosting:staging

  deploy_to_firebase_production: # deploy the project to prod - SHOULD ONLY BE RUN ON MASTER BRANCH
    executor: node-project
    steps:
      - restore_cache: # restore the /dist folder and associated deploy files
          key: dist-cache-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: Deploy to Firebase Hosting
          command: ./node_modules/.bin/firebase deploy --token "$FIREBASE_TOKEN" --only hosting:production

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - checkout_and_install_deps
      - audit:
          requires:
            - checkout_and_install_deps
      - test:
          requires:
            - checkout_and_install_deps
      - lint:
          requires:
            - checkout_and_install_deps
      - build:
          requires:
            - checkout_and_install_deps
      - deploy_to_firebase_staging:
          filters:
            branches:
              only: staging
          requires:
            - audit
            - test
            - lint
            - build
      - deploy_to_firebase_production:
          filters:
            branches:
              only: master
          requires:
            - audit
            - test
            - lint
            - build
